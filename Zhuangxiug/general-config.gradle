
//获取版本号,使用git提交版本号
//def getVersionCode = { ->
//    try {
//        def stdout = new ByteArrayOutputStream()
//        exec {
//            commandLine 'git', 'rev-list', '--all', '--count'
//            standardOutput = stdout
//        }
//        return Integer.parseInt(stdout.toString().trim()) + 400
//    }
//    catch (ignored) {
//        return -1;
//    }
//}
//获取版本号,使用配置文件
def versionCode() {
    def versionFile = file('version.properties')
    if(!versionFile.canRead()){
        versionFile.createNewFile();
        def Properties versionProps = new Properties() versionProps.load(new FileInputStream(versionFile))
        versionProps.setProperty('VERSION_CODE',1)
        versionProps.store(versionFile.newWriter(), null)
    }
    if (versionFile.canRead()) {
        def Properties versionProps = new Properties() versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
        def runTasks = gradle.startParameter.taskNames
        //仅在assembleRelease任务是增加版本号
        if ('assembleRelease' in runTasks) {
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

